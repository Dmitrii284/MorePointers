#include <iostream>
int main() {
	setlocale(LC_ALL, "Rus");
	int n,m;

	// Направление указателя нап нейтральный адрес
	int* pointer;

	//1 -й способ  НЕ ДЕЛАТЬ УЖЕ ТАК НЕ ПИШУТ
	/*pointer = 0;// Нейтральный адрес
	if (pointer != 0)
		std::cout << pointer << std::endl;
	else
		std::cout << "Указатель направлен на нейтральную область памяти .\n";
	//*pointer = 15;// ОШИБКА !! Т.к в нейтральной памяти нельзя записывать данные
	*/

	//2 -й способ  Так НЕ ДЕЛАТЬ УЖЕ ТАК НЕ ПИШУТ
	/*pointer = NULL;// Так правильно писать ю Так принято отличать нейтральный адрес
	// В обычных переменных (int n = NULL ) НЕ ИСПОЛЬЗУЕТСЯ!!!
	// Нейтральный адрес
	if (pointer != NULL)
		std::cout << pointer << std::endl;
	else
		std::cout << "Указатель направлен на нейтральную область памяти .\n";
		*/

		//3 -й способ ДЕЛАТЬ ТАК!!!!
	/*pointer = nullptr; // Это тот же ноль только это как цифра в буквенном выражении.
	if (pointer != nullptr)
		std::cout << pointer << std::endl;
	else
		std::cout << "Указатель не инициализирован  .\n";
		*/

	// Модификации указателей
	
	// Это дополнительные приписки сверху insaiding const statik
	n = 15;

	const int* pn1;// Указатель на константу Он Может быть изменен хоть сколько
	pn1 = &n; // Но мы неможем поменять переменную
	// Сам по себе указатель константой не является., с его помощью направить на другие области памяти .
	// Но значение константы мы не можем...
	//*pn1 = 1; // ОШИБКА!!
	n = 1; 
	std::cout << *pn1 << std::endl;

	//1 Константный указатель или указатель - константа.

	//
	int* const pn2 = &n;
	//pn2 = &m; // ОШИБКА
	// Указатель - константа не может быть перенаправлен на другую область памяти, 
	// Он должен сразуже быть инициализирован и с его по
	//мощю можно менять значение переменной. ОН ЧАСТЬ ПРИМЕНЯЕТСЯ.
	*pn2 = 20;
	std::cout << n << std::endl;

	//Константный указатель на константу
	// Не может быть перенаправлен на другую область памяти и должен быть инициализирован в момент ссоздания с его помощю можно
	// поменять значение переменной на которую он направлен  МАЛО ИСПОЛЬЗУЕТСЯ МНОГО ОГРАНИЧЕНИЙ, НО ЗАТО безопастность 

	const int* const pn3 = &n;
	
	//pn3 = &m; //ОШИБКА
	// *pn3 ==30; //ОШИБКА
	std::cout << *pn3 << std::endl;
	return 0;
}